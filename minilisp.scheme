(define (atom? x) (not (or (pair? x) (null? x))))

(define (S v)
  (if (null? v)
  ""
  (if (pair? v)
  (jsize v)
  (string-append (format "~a" v) )
  )
  )
)

(define (xcar tree)
  (if (equal? 1 (length tree))
    (car tree)
    (xcar (cdr tree))
  )
)

(define (xcdr tree)
  (if (equal? 1 (length tree))
    '()
    (cons (car tree) (xcdr (cdr tree))
  )
))

(define (AST code)
	(read 
		(open-input-string code)))



(define (jsize tree)
  (case (car tree)
  ('define (func-def tree))
  ('not (func-call (cons '! (cdr tree))))
  ('or (brackets (join-op (cdr tree) " || " ) ))
  ('and (brackets (join-op (cdr tree) " && " ) ))
  ((+ - * / %) (brackets (func->op tree ) ))
  ('begin (blocks (cdr tree) ) )
  (else (func-call tree))
  )
)

(define (brackets str)
  (string-append "(" str ")" ))

(define (join-op tree j)
  (string-join (map S tree) j )
)

(define (func->op tree)
  (join-op (cdr tree) (S (car tree)))
)

(define (blocks tree)
  (if (null? tree)
  ""
  (string-append (jsize (car tree)) ";\n"  (blocks (cdr tree)))))

(define (func-def tree)
  (string-append 
    "function " 
    (S (car (car (cdr tree)))) "(" (string-join (map S (cdr (car (cdr tree ) ) ) ) ", ") ") {\n" 
    (jsize (insert-return (xcar tree)))
    "}" )
)

; If function body 
(define (insert-return tree)
  (if (equal? (car tree) 'begin)
    (reverse (cons (cons 'return (cons (xcar tree) '() )) (cdr (reverse tree))))
    (cons 'return (cons tree '()))
     )
  )

(define (func-call tree)
  (if (null? tree)
    ""
  (string-append (S(car tree)) "(" (string-join (map S (cdr tree)) ", ") ")" )))


(define (build tree)
  ;(print tree)
  (if (or (atom? tree) (null? tree))
    (S tree)
    (jsize tree )
  )
)

(define code "(begin (define (f a b) (begin (print 5) (* (- a b) (+ a b)))) (f 9 4))")
;(define code "(begin (define (f a b) (* (- a b) (+ a b)) (f 9 4))")

(display (build (AST code)))